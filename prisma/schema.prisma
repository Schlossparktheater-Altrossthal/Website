generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  member
  cast
  tech
  board
  finance
  owner
  admin
}

enum SyncScope {
  inventory
  tickets
}

enum InventoryItemCategory {
  light
  sound
  network
  video
  instruments
  cables
  cases
  accessories
}

enum TicketStatus {
  unused
  checked_in
  invalid
}

enum DepartmentMembershipRole {
  lead
  member
  deputy
  guest
}

enum CharacterCastingType {
  primary
  alternate
  cover
  cameo
}

enum BreakdownStatus {
  planned
  in_progress
  blocked
  ready
  done
}

enum AvatarSource {
  GRAVATAR
  UPLOAD
  INITIALS
}

enum ClueType {
  text
  image
  audio
  riddle
}

enum AttendanceStatus {
  yes
  no
  emergency
  maybe
}

enum GalleryMediaType {
  image
  video
}

enum FileLibraryAccessType {
  VIEW
  DOWNLOAD
  UPLOAD
}

enum FileLibraryAccessTargetType {
  SYSTEM_ROLE
  APP_ROLE
}

enum AvailabilityStatus {
  blocked
  available
}

enum OnboardingFocus {
  acting
  tech
  both
}

enum RolePreferenceDomain {
  acting
  crew
}

enum RehearsalProposalStatus {
  proposed    // Automatisch vorgeschlagen
  approved    // Von der Regie freigegeben
  rejected    // Von der Regie abgelehnt
  scheduled   // Als tatsächlicher Probentermin übernommen
}

// Availability (new, per-day granular)
enum AvailabilityKind {
  FULL_AVAILABLE
  FULL_UNAVAILABLE
  PARTIAL
}

enum BlockedDayKind {
  BLOCKED
  LIMITED
  PREFERRED
}

// Einheiten für Maße
enum MeasurementUnit {
  CM    // Zentimeter
  INCH  // Zoll
  EU    // EU-Größe
  DE    // Deutsche Größe
}

// Arten von Maßen
enum MeasurementType {
  HEIGHT        // Körpergröße
  CHEST        // Brustumfang
  WAIST        // Taillenumfang
  HIPS         // Hüftumfang
  INSEAM       // Innenbeinlänge
  SHOULDER     // Schulterbreite
  SLEEVE       // Armlänge
  SHOE_SIZE    // Schuhgröße
  HEAD         // Kopfumfang
}

// Schweregrad von Unverträglichkeiten
enum AllergyLevel {
  MILD         // Leicht (Unbehagen)
  MODERATE     // Mittel (Allergische Reaktion)
  SEVERE       // Schwer (Notfall möglich)
  LETHAL       // Lebensbedrohlich
}

model AvailabilityDay {
  id               String           @id @default(cuid())
  userId           String
  date             DateTime
  kind             AvailabilityKind
  availableFromMin Int?
  availableToMin   Int?
  note             String?
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model AvailabilityTemplate {
  id               String           @id @default(cuid())
  userId           String
  weekday          Int              // 0=Sonntag … 6=Samstag
  kind             AvailabilityKind
  availableFromMin Int?
  availableToMin   Int?
  validFrom        DateTime?
  validTo          DateTime?
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  todo
  doing
  done
}

enum FinanceType {
  income
  expense
}

enum FinanceEntryKind {
  general
  invoice
  donation
}

enum FinanceEntryStatus {
  draft
  pending
  approved
  paid
  cancelled
}

enum VisibilityScope {
  board
  finance
}

enum Audience {
  all
  group
  role
}

enum IssueCategory {
  general
  website_bug
  improvement
  support
  other
}

enum IssueStatus {
  open
  in_progress
  resolved
  closed
}

enum IssuePriority {
  low
  medium
  high
  urgent
}

enum IssueVisibility {
  public
  private
}

model User {
  id        String   @id @default(cuid())
  firstName String?
  lastName  String?
  name      String?
  email     String?  @unique
  role      Role     @default(member)
  passwordHash String?
  createdAt DateTime @default(now())
  dateOfBirth DateTime?
  deactivatedAt DateTime?
  avatarSource        AvatarSource @default(GRAVATAR)
  avatarImage         Bytes?
  avatarImageMime     String?
  avatarImageUpdatedAt DateTime?

  accounts     Account[]
  sessions     Session[]
  guesses      Guess[]
  attendance   RehearsalAttendance[]
  availability Availability[]
  tasks        Task[]                @relation("TaskAssignee")
  // New availability relations
  availabilityDays       AvailabilityDay[]
  availabilityTemplates  AvailabilityTemplate[]
  attendanceLogsAuthored RehearsalAttendanceLog[] @relation("AttendanceLogAuthor")
  attendanceLogsTarget   RehearsalAttendanceLog[] @relation("AttendanceLogTarget")
  dietaryRestrictions  DietaryRestriction[]
  measurements           MemberMeasurement[]
  sizes                  MemberSize[]
  roles                  UserRole[]
  approvedProposals      RehearsalProposal[] @relation("ProposalApprover")
  notifications         NotificationRecipient[]
  blockedDays            BlockedDay[]
  appRoles               UserAppRole[]
  rehearsalInvites       RehearsalInvitee[]
  photoConsent           PhotoConsent?
  approvedPhotoConsents  PhotoConsent[] @relation("PhotoConsentApprover")
  departmentMemberships  DepartmentMembership[]
  departmentTasksAssigned DepartmentTask[] @relation("DepartmentTaskAssignee")
  departmentTasksCreated  DepartmentTask[] @relation("DepartmentTaskCreator")
  departmentEventsCreated DepartmentEvent[]
  characterCastings      CharacterCasting[]
  breakdownAssignments   SceneBreakdownItem[] @relation("BreakdownAssignee")
  inviteLinksCreated     MemberInvite[]       @relation("MemberInvitesCreated")
  inviteRedemptions      MemberInviteRedemption[]
  onboardingProfile      MemberOnboardingProfile?
  interests              UserInterest[]
  rolePreferences        MemberRolePreference[]
  productionMemberships  ProductionMembership[]
  interestsAuthored      Interest[]             @relation("InterestCreatedBy")
  issuesCreated          Issue[]                @relation("IssueCreatedBy")
  issuesUpdated          Issue[]                @relation("IssueUpdatedBy")
  issueComments          IssueComment[]         @relation("IssueCommentAuthor")
  financeEntriesCreated  FinanceEntry[]         @relation("FinanceEntryCreatedBy")
  financeEntriesApproved FinanceEntry[]         @relation("FinanceEntryApprovedBy")
  financeEntriesPaidFor  FinanceEntry[]         @relation("FinanceEntryMemberPaidBy")
  financeLogsAuthored    FinanceLog[]           @relation("FinanceLogChangedBy")
  finalRehearsalDutiesAssigned FinalRehearsalDuty[] @relation("FinalRehearsalDutyAssignee")
  finalRehearsalDutiesCreated  FinalRehearsalDuty[] @relation("FinalRehearsalDutyCreatedBy")
  galleryItems           GalleryItem[]
  fileLibraryFoldersCreated FileLibraryFolder[] @relation("FileLibraryFoldersCreated")
  fileLibraryItemsUploaded  FileLibraryItem[]   @relation("FileLibraryItemsUploaded")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OwnerSetupToken {
  id         String   @id @default(cuid())
  tokenHash  String   @unique
  createdAt  DateTime @default(now())
  consumedAt DateTime?
}

model Show {
  id         String         @id @default(cuid())
  year       Int
  title      String?
  synopsis   String?
  dates      Json
  posterUrl  String?
  revealedAt DateTime?
  finalRehearsalWeekStart DateTime?
  meta       Json?
  clues      Clue[]
  rehearsals Rehearsal[]
  finance    FinanceEntry[]
  budgets    FinanceBudget[]
  guesses    Guess[]
  proposals  RehearsalProposal[]
  characters Character[]
  scenes     Scene[]
  finalRehearsalDuties FinalRehearsalDuty[]
  memberships ProductionMembership[]
  onboardingProfiles MemberOnboardingProfile[]
  invites    MemberInvite[]
}

model FinalRehearsalDuty {
  id          String   @id @default(cuid())
  showId      String
  date        DateTime
  title       String
  description String?
  location    String?
  startTime   Int?
  endTime     Int?
  assigneeId  String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  show        Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
  assignee    User?    @relation("FinalRehearsalDutyAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdBy   User     @relation("FinalRehearsalDutyCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([showId, date])
  @@index([assigneeId])
}

model Department {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  color       String?
  isCore      Boolean  @default(true)
  requiresJoinApproval Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memberships DepartmentMembership[]
  breakdownItems SceneBreakdownItem[]
  tasks        DepartmentTask[]
  permissions  DepartmentPermission[]
  events       DepartmentEvent[]
}

model DepartmentMembership {
  id           String                  @id @default(cuid())
  departmentId String
  userId       String
  role         DepartmentMembershipRole @default(member)
  title        String?
  note         String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  department   Department              @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([departmentId, userId], name: "departmentId_userId")
}

model DepartmentTask {
  id            String     @id @default(cuid())
  departmentId  String
  title         String
  description   String?
  status        TaskStatus @default(todo)
  dueAt         DateTime?
  assigneeId    String?
  createdById   String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  department    Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  assignee      User?      @relation("DepartmentTaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creator       User       @relation("DepartmentTaskCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([departmentId, status])
  @@index([assigneeId])
  @@index([createdAt])
}

model DepartmentPermission {
  id           String     @id @default(cuid())
  departmentId String
  permissionId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([departmentId, permissionId])
}

model DepartmentEvent {
  id            String     @id @default(cuid())
  departmentId  String
  title         String
  start         DateTime
  end           DateTime?
  location      String?
  description   String?
  createdById   String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  department    Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  createdBy     User       @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([departmentId, start])
}

model Character {
  id             String            @id @default(cuid())
  showId         String
  name           String
  shortName      String?
  description    String?
  notes          String?
  color          String?
  order          Int               @default(0)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  show           Show              @relation(fields: [showId], references: [id], onDelete: Cascade)
  castings       CharacterCasting[]
  sceneAppearances SceneCharacter[]

  @@index([showId, order])
}

model CharacterCasting {
  id          String               @id @default(cuid())
  characterId String
  userId      String
  type        CharacterCastingType @default(primary)
  notes       String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  character   Character            @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([characterId, userId, type], name: "characterId_userId_type")
}

model Scene {
  id              String   @id @default(cuid())
  showId          String
  sequence        Int      @default(0)
  identifier      String?
  title           String?
  slug            String?
  summary         String?
  location        String?
  timeOfDay       String?
  durationMinutes Int?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  show            Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
  characters      SceneCharacter[]
  breakdownItems  SceneBreakdownItem[]

  @@unique([showId, slug], name: "showId_slug")
  @@index([showId, sequence])
}

model SceneCharacter {
  id          String   @id @default(cuid())
  sceneId     String
  characterId String
  isFeatured  Boolean  @default(false)
  note        String?
  order       Int      @default(0)
  scene       Scene    @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([sceneId, characterId], name: "sceneId_characterId")
  @@index([characterId])
}

model SceneBreakdownItem {
  id            String          @id @default(cuid())
  sceneId       String
  departmentId  String
  title         String
  description   String?
  status        BreakdownStatus @default(planned)
  neededBy      DateTime?
  note          String?
  assignedToId  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  scene         Scene           @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  department    Department      @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  assignedTo    User?           @relation("BreakdownAssignee", fields: [assignedToId], references: [id], onDelete: SetNull)

  @@index([sceneId, departmentId])
}

model Clue {
  id        String   @id @default(cuid())
  showId    String
  index     Int
  type      ClueType
  content   Json
  releaseAt DateTime
  points    Int
  published Boolean  @default(false)
  show      Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
  tipSubmissions MysteryTipSubmission[]

  @@unique([showId, index], name: "showId_index")
  @@index([showId, published, releaseAt])
}

model HomepageCountdown {
  id              String   @id @default("public")
  countdownTarget DateTime?
  disabled        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model MysterySettings {
  id                 String   @id @default("default")
  countdownTarget    DateTime?
  expirationMessage  String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model WebsiteTheme {
  id          String            @id @default(cuid())
  name        String
  description String?
  tokens      Json
  isDefault   Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  settings    WebsiteSettings[]
}

model WebsiteSettings {
  id        String   @id @default("public")
  siteTitle String   @default("Sommertheater im Schlosspark")
  colorMode String   @default("dark")
  maintenanceMode Boolean  @default(false)
  themeId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  theme     WebsiteTheme? @relation(fields: [themeId], references: [id], onDelete: SetNull)

  @@index([themeId])
}

model SperrlisteSettings {
  id                     String   @id @default("default")
  holidaySourceMode      String   @default("default")
  holidaySourceUrl       String?
  holidaySourceStatus    String   @default("unknown")
  holidaySourceMessage   String?
  holidaySourceCheckedAt DateTime?
  freezeDays             Int      @default(7)
  preferredWeekdays      Json?
  exceptionWeekdays      Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model MysteryTip {
  id             String   @id @default(cuid())
  text           String
  normalizedText String   @unique
  count          Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  submissions    MysteryTipSubmission[]
}

model MysteryTipSubmission {
  id             String   @id @default(cuid())
  tipId          String
  clueId         String?
  playerName     String
  tipText        String
  normalizedText String
  isCorrect      Boolean  @default(false)
  score          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tip            MysteryTip @relation(fields: [tipId], references: [id], onDelete: Cascade)
  clue           Clue?      @relation(fields: [clueId], references: [id], onDelete: SetNull)

  @@index([clueId])
  @@index([playerName])
  @@index([tipId])
}

model Guess {
  id        String   @id @default(cuid())
  userId    String
  showId    String
  guessText String
  score     Int      @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  show      Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
}

model Rehearsal {
  id                  String                @id @default(cuid())
  showId              String?               // Optional - für allgemeine Proben
  title               String                @default("Probe")
  start               DateTime
  end                 DateTime
  location            String
  description         String?
  requiredRoles       Json
  registrationDeadline DateTime?            // Deadline für An-/Abmeldungen (1 Woche vor Probe)
  isFromTemplate      Boolean              @default(false)
  templateId    String?
  priority      RehearsalPriority     @default(NORMAL)
  status        RehearsalStatus       @default(PLANNED)
  createdBy     String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now()) @updatedAt
  show          Show?                 @relation(fields: [showId], references: [id], onDelete: Cascade)
  attendance     RehearsalAttendance[]
  attendanceLogs RehearsalAttendanceLog[]
  template       RehearsalTemplate?    @relation(fields: [templateId], references: [id])
  proposals      RehearsalProposal[]
  notifications  Notification[]
  invitees       RehearsalInvitee[]
}

model RehearsalInvitee {
  id          String    @id @default(cuid())
  rehearsalId String
  userId      String
  rehearsal   Rehearsal @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([rehearsalId, userId])
}

model RehearsalTemplate {
  id            String              @id @default(cuid())
  name          String
  description   String?
  weekday       Int                 // 0=Sonntag, 1=Montag, etc.
  startTime     String              // HH:MM format
  endTime       String              // HH:MM format
  location      String
  requiredRoles Json
  isActive      Boolean             @default(true)
  priority      RehearsalPriority   @default(NORMAL)
  validFrom     DateTime?
  validTo       DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  rehearsals    Rehearsal[]
}

enum RehearsalPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum RehearsalStatus {
  DRAFT
  PLANNED
  CONFIRMED
  CANCELLED
  COMPLETED
}

model RehearsalAttendance {
  id              String           @id @default(cuid())
  rehearsalId     String
  userId          String
  status          AttendanceStatus
  emergencyReason String?         // Begründung für Emergency-Absagen
  rehearsal       Rehearsal        @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([rehearsalId, userId], name: "rehearsalId_userId")
}

model RehearsalAttendanceLog {
  id            String             @id @default(cuid())
  rehearsalId   String
  userId        String
  previous      AttendanceStatus?
  next          AttendanceStatus?
  comment       String?
  changedAt     DateTime          @default(now())
  changedById   String
  rehearsal     Rehearsal         @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  user          User              @relation("AttendanceLogTarget", fields: [userId], references: [id], onDelete: Cascade)
  changedBy     User              @relation("AttendanceLogAuthor", fields: [changedById], references: [id], onDelete: Cascade)

  @@index([rehearsalId, changedAt])
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  role   Role
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

// Permission system (matrix)
model Permission {
  id          String @id @default(cuid())
  key         String @unique
  label       String?
  description String?
  grants      AppRolePermission[]
  departmentGrants DepartmentPermission[]
}

model AppRole {
  id         String  @id @default(cuid())
  name       String  @unique
  isSystem   Boolean @default(false)
  systemRole Role?
  sortIndex  Int     @default(0)
  grants     AppRolePermission[]
  users      UserAppRole[]
  fileLibraryAccesses FileLibraryFolderAccess[]
}

model AppRolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         AppRole    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model UserAppRole {
  id     String  @id @default(cuid())
  userId String
  roleId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   AppRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

// Körpermaße für Kostüme etc.
model MemberMeasurement {
  id        String          @id @default(cuid())
  userId    String
  type      MeasurementType
  value     Float
  unit      MeasurementUnit
  note      String?
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

// Konfektionsgrößen
model MemberSize {
  id        String    @id @default(cuid())
  userId    String
  category  String    // z.B. "Oberteil", "Hose", "Schuhe"
  size      String    // Die tatsächliche Größe
  note      String?
  updatedAt DateTime  @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category])
}

// Allergien und Unverträglichkeiten
model DietaryRestriction {
  id          String       @id @default(cuid())
  userId      String
  allergen    String      // Was die Allergie/Unverträglichkeit auslöst
  level       AllergyLevel
  symptoms    String?     // Beschreibung der Symptome
  treatment   String?     // Notfallbehandlung
  note        String?
  isActive    Boolean     @default(true)
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, allergen])
}

model RehearsalProposal {
  id               String                 @id @default(cuid())
  showId           String?                // Optional - für allgemeine Proben
  title            String                 @default("Probenvorschlag")
  date             DateTime               // Vorgeschlagenes Datum
  startTime        Int                    // Vorgeschlagene Startzeit (Minuten seit Mitternacht)
  endTime          Int                    // Vorgeschlagene Endzeit (Minuten seit Mitternacht)
  location         String?
  requiredRoles    Json                   // Benötigte Rollen für diese Probe
  status           RehearsalProposalStatus @default(proposed)
  createdAt        DateTime               @default(now())
  approvedAt       DateTime?              // Wann wurde der Vorschlag freigegeben?
  approvedBy       String?                // Wer hat den Vorschlag freigegeben?
  rejectionReason  String?                // Optional: Grund für Ablehnung
  rehearsalId      String?                // Referenz zur tatsächlichen Probe, wenn der Vorschlag angenommen wurde
  
  show             Show?                  @relation(fields: [showId], references: [id])
  approver         User?                  @relation("ProposalApprover", fields: [approvedBy], references: [id])
  rehearsal        Rehearsal?             @relation(fields: [rehearsalId], references: [id])
  
  @@index([date, status])
  @@index([showId, status])
}

model Availability {
  id     String             @id @default(cuid())
  userId String
  start  DateTime
  end    DateTime
  status AvailabilityStatus
  user   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlockedDay {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  reason    String?
  kind      BlockedDayKind @default(BLOCKED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  assigneeId  String?
  status      TaskStatus @default(todo)
  labels      Json
  dueAt       DateTime?
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
}

model InventoryItem {
  id        String  @id @default(cuid())
  sku       String  @unique @default(cuid())
  name      String
  qty       Int
  location  String?
  owner     String?
  condition String?
  category         InventoryItemCategory @default(accessories)
  details          String?
  lastUsedAt       DateTime?
  lastInventoryAt  DateTime?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
}

model SyncEvent {
  id               String    @id @default(cuid())
  scope            SyncScope
  clientId         String
  clientMutationId String
  dedupeKey        String?
  type             String
  payload          Json
  occurredAt       DateTime
  serverSeq        Int       @unique @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  mutation         SyncMutation? @relation(fields: [clientMutationId], references: [clientMutationId], onDelete: Cascade)

  @@index([scope, serverSeq])
  @@index([scope, dedupeKey])
  @@index([scope, occurredAt])
}

model SyncMutation {
  clientMutationId String   @id
  clientId         String
  scope            SyncScope
  eventCount       Int
  firstServerSeq   Int?
  lastServerSeq    Int?
  acknowledgedSeq  Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  events           SyncEvent[]

  @@index([scope, clientId])
}

model FinanceEntry {
  id              String             @id @default(cuid())
  type            FinanceType
  kind            FinanceEntryKind   @default(general)
  status          FinanceEntryStatus @default(draft)
  title           String
  description     String?
  amount          Float
  currency        String             @default("EUR")
  category        String?
  bookingDate     DateTime           @default(now())
  dueDate         DateTime?
  paidAt          DateTime?
  invoiceNumber   String?
  vendor          String?
  memberPaidById  String?
  donationSource  String?
  donorContact    String?
  tags            Json?
  showId          String?
  budgetId        String?
  visibilityScope VisibilityScope    @default(finance)
  createdById     String
  approvedById    String?
  approvedAt      DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  show           Show?          @relation(fields: [showId], references: [id], onDelete: SetNull)
  budget         FinanceBudget? @relation(fields: [budgetId], references: [id], onDelete: SetNull)
  createdBy      User           @relation("FinanceEntryCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  approvedBy     User?          @relation("FinanceEntryApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  memberPaidBy   User?          @relation("FinanceEntryMemberPaidBy", fields: [memberPaidById], references: [id], onDelete: SetNull)
  attachments    FinanceAttachment[]
  logs           FinanceLog[]

  @@index([showId, status])
  @@index([budgetId])
  @@index([memberPaidById, bookingDate])
}

model FinanceAttachment {
  id        String        @id @default(cuid())
  entryId   String
  filename  String
  url       String?
  mimeType  String?
  size      Int?
  meta      Json?
  createdAt DateTime      @default(now())
  entry     FinanceEntry  @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@index([entryId])
}

model FinanceBudget {
  id            String         @id @default(cuid())
  showId        String?
  category      String
  plannedAmount Float          @default(0)
  currency      String         @default("EUR")
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  show          Show?          @relation(fields: [showId], references: [id], onDelete: SetNull)
  entries       FinanceEntry[]

  @@index([showId, category])
}

model FinanceLog {
  id          String             @id @default(cuid())
  entryId     String
  changedById String?
  fromStatus  FinanceEntryStatus?
  toStatus    FinanceEntryStatus
  note        String?
  createdAt   DateTime           @default(now())
  entry       FinanceEntry       @relation(fields: [entryId], references: [id], onDelete: Cascade)
  changedBy   User?              @relation("FinanceLogChangedBy", fields: [changedById], references: [id], onDelete: SetNull)

  @@index([entryId])
  @@index([changedById])
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  body        String?
  type        String?
  createdAt   DateTime @default(now())
  rehearsalId String?
  rehearsal   Rehearsal? @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  recipients  NotificationRecipient[]
}

model NotificationRecipient {
  id             String        @id @default(cuid())
  notificationId String
  userId         String
  readAt         DateTime?
  notification   Notification  @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
}

model Issue {
  id             String        @id @default(cuid())
  title          String
  description    String
  category       IssueCategory  @default(general)
  status         IssueStatus    @default(open)
  priority       IssuePriority  @default(medium)
  visibility     IssueVisibility @default(public)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lastActivityAt DateTime       @default(now())
  resolvedAt     DateTime?
  createdById    String?
  updatedById    String?
  createdBy      User?          @relation("IssueCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy      User?          @relation("IssueUpdatedBy", fields: [updatedById], references: [id])
  comments       IssueComment[]

  @@index([status, lastActivityAt])
  @@index([category])
  @@index([createdById])
  @@index([visibility])
}

model IssueComment {
  id        String   @id @default(cuid())
  issueId   String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  author    User     @relation("IssueCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([issueId])
}

enum PhotoConsentStatus {
  pending
  approved
  rejected
}

model PhotoConsent {
  id               String              @id @default(cuid())
  userId           String              @unique
  status           PhotoConsentStatus  @default(pending)
  consentGiven     Boolean             @default(true)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  approvedAt       DateTime?
  approvedById     String?
  rejectionReason  String?
  documentName     String?
  documentMime     String?
  documentSize     Int?
  documentUploadedAt DateTime?
  documentData     Bytes?
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvedBy       User?               @relation("PhotoConsentApprover", fields: [approvedById], references: [id])
}

model GalleryItem {
  id           String           @id @default(cuid())
  year         Int
  description  String?
  fileName     String
  mimeType     String
  fileSize     Int
  mediaType    GalleryMediaType
  data         Bytes
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  uploadedById String
  uploadedBy   User             @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@index([year, createdAt])
}

model FileLibraryFolder {
  id              String                    @id @default(cuid())
  parentId        String?
  name            String
  description     String?
  allowAllView    Boolean                   @default(true)
  allowAllDownload Boolean                  @default(true)
  allowAllUpload  Boolean                   @default(false)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  createdById     String?

  parent          FileLibraryFolder?        @relation("FileLibraryFolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children        FileLibraryFolder[]       @relation("FileLibraryFolderHierarchy")
  createdBy       User?                     @relation("FileLibraryFoldersCreated", fields: [createdById], references: [id], onDelete: SetNull)
  files           FileLibraryItem[]
  accessRules     FileLibraryFolderAccess[]

  @@index([parentId])
}

model FileLibraryItem {
  id           String             @id @default(cuid())
  folderId     String
  fileName     String
  mimeType     String
  fileSize     Int
  data         Bytes
  description  String?
  uploadedById String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  folder       FileLibraryFolder  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  uploadedBy   User?              @relation("FileLibraryItemsUploaded", fields: [uploadedById], references: [id], onDelete: SetNull)

  @@index([folderId, createdAt])
}

model FileLibraryFolderAccess {
  id          String                     @id @default(cuid())
  folderId    String
  accessType  FileLibraryAccessType
  targetType  FileLibraryAccessTargetType
  systemRole  Role?
  appRoleId   String?

  folder      FileLibraryFolder          @relation(fields: [folderId], references: [id], onDelete: Cascade)
  appRole     AppRole?                   @relation(fields: [appRoleId], references: [id], onDelete: Cascade)

  @@index([folderId, accessType])
  @@unique([folderId, accessType, systemRole, appRoleId])
}

model MemberInvite {
  id          String   @id @default(cuid())
  tokenHash   String   @unique
  label       String?
  note        String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  maxUses     Int?
  usageCount  Int      @default(0)
  roles       Role[]
  isDisabled  Boolean  @default(false)
  createdById String
  showId      String

  createdBy   User     @relation("MemberInvitesCreated", fields: [createdById], references: [id], onDelete: Cascade)
  redemptions MemberInviteRedemption[]
  onboardings MemberOnboardingProfile[]
  show        Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
}

model MemberInviteRedemption {
  id           String    @id @default(cuid())
  inviteId     String
  sessionToken String    @unique
  email        String?
  userId       String?
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  payload      Json?
  whatsappLinkVisitedAt DateTime?

  invite   MemberInvite @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  user     User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  profile  MemberOnboardingProfile? @relation("OnboardingProfileRedemption")

  @@index([inviteId])
}

model Interest {
  id           String          @id @default(cuid())
  name         String          @unique
  createdAt    DateTime        @default(now())
  createdById  String?

  createdBy    User?           @relation("InterestCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  userInterest UserInterest[]
}

model UserInterest {
  id         String   @id @default(cuid())
  userId     String
  interestId String
  createdAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest  Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)

  @@unique([userId, interestId])
}

model MemberRolePreference {
  id        String               @id @default(cuid())
  userId    String
  code      String
  domain    RolePreferenceDomain
  weight    Int
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, code])
}

model MemberOnboardingProfile {
  id           String           @id @default(cuid())
  userId       String           @unique
  inviteId     String?
  redemptionId String?         @unique
  showId       String?
  focus        OnboardingFocus
  background   String?
  backgroundClass String?
  notes        String?
  gender       String?
  memberSinceYear Int?
  dietaryPreference String?
  dietaryPreferenceStrictness String?
  whatsappLinkVisitedAt DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  user       User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invite     MemberInvite?            @relation(fields: [inviteId], references: [id], onDelete: SetNull)
  redemption MemberInviteRedemption?  @relation("OnboardingProfileRedemption", fields: [redemptionId], references: [id], onDelete: SetNull)
  show       Show?                    @relation(fields: [showId], references: [id], onDelete: SetNull)

  @@index([inviteId])
}

model ProductionMembership {
  id        String   @id @default(cuid())
  showId    String
  userId    String
  joinedAt  DateTime @default(now())
  leftAt    DateTime?

  show      Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([showId, userId])
  @@index([userId, leftAt])
  @@index([showId, leftAt])
}

model Announcement {
  id          String   @id @default(cuid())
  audience    Audience
  body        String
  attachments Json?
  createdAt   DateTime @default(now())
}

enum AnalyticsRequestArea {
  public
  members
  api
  unknown
}

enum AnalyticsServerLogSeverity {
  info
  warning
  error
}

enum AnalyticsServerLogStatus {
  open
  monitoring
  resolved
}

model AnalyticsHttpRequest {
  id           String                @id @default(cuid())
  timestamp    DateTime              @default(now())
  method       String                @default("GET")
  route        String
  area         AnalyticsRequestArea
  statusCode   Int
  durationMs   Int
  payloadBytes Int                   @default(0)
  createdAt    DateTime              @default(now())

  @@index([timestamp])
  @@index([area, timestamp])
  @@index([route])
}

model AnalyticsUptimeHeartbeat {
  id         String   @id @default(cuid())
  service    String   @default("app-server")
  isHealthy  Boolean  @default(true)
  latencyMs  Int?
  observedAt DateTime @default(now())
  createdAt  DateTime @default(now())

  @@index([service, observedAt])
  @@index([observedAt])
}

model AnalyticsHttpSummary {
  id                        String   @id @default(cuid())
  windowStart               DateTime
  windowEnd                 DateTime
  totalRequests             Int      @default(0)
  successfulRequests        Int      @default(0)
  clientErrorRequests       Int      @default(0)
  serverErrorRequests       Int      @default(0)
  averageDurationMs         Float    @default(0)
  p95DurationMs             Int?
  averagePayloadBytes       Float    @default(0)
  uptimePercentage          Float?
  frontendRequests          Int      @default(0)
  frontendAvgResponseMs     Float    @default(0)
  frontendAvgPayloadBytes   Float    @default(0)
  membersRequests           Int      @default(0)
  membersAvgResponseMs      Float    @default(0)
  apiRequests               Int      @default(0)
  apiAvgResponseMs          Float    @default(0)
  apiErrorRate              Float    @default(0)
  generatedAt               DateTime @default(now())

  @@map("analytics_http_summary")
  @@index([windowEnd])
}

model AnalyticsHttpPeakHour {
  id          String   @id @default(cuid())
  bucketStart DateTime
  bucketEnd   DateTime
  requests    Int      @default(0)
  share       Float    @default(0)
  generatedAt DateTime @default(now())

  @@map("analytics_http_peak_hours")
  @@index([bucketStart])
}

model AnalyticsPageView {
  id         String   @id @default(cuid())
  sessionId  String?  @unique
  path       String
  scope      String?
  userAgent  String?
  deviceHint String?
  lcpMs      Float?
  loadTimeMs Float?
  weight     Int      @default(1)
  createdAt  DateTime @default(now())
  analyticsSessionId String?
  analyticsSession   AnalyticsSession? @relation(fields: [analyticsSessionId], references: [id], onDelete: SetNull)

  @@index([path])
  @@index([scope])
  @@index([deviceHint])
  @@index([createdAt])
  @@index([analyticsSessionId])
}

model AnalyticsDeviceSnapshot {
  id                    String   @id @default(cuid())
  sessionId             String?  @unique
  deviceHint            String?
  userAgent             String?
  platform              String?
  hardwareConcurrency   Int?
  deviceMemoryGb        Float?
  touchSupport          Int?
  reducedMotion         Boolean?
  prefersDarkMode       Boolean?
  colorScheme           String?
  connectionType        String?
  connectionEffectiveType String?
  connectionRttMs       Float?
  connectionDownlinkMbps Float?
  viewportWidth         Int?
  viewportHeight        Int?
  pixelRatio            Float?
  language              String?
  timezone              String?
  createdAt             DateTime @default(now())

  @@index([deviceHint])
  @@index([createdAt])
}

model AnalyticsPageMetric {
  id         String   @id @default(cuid())
  path       String
  scope      String?
  avgLoadMs  Float    @map("avg_load")
  lcpMs      Float?   @map("lcp")
  weight     Int      @default(0)
  generatedAt DateTime @default(now())

  @@map("analytics_page_metrics")
  @@index([path])
  @@index([scope])
}

model AnalyticsDeviceMetric {
  id         String   @id @default(cuid())
  device     String
  sessions   Int
  avgLoadMs  Float   @map("avg_load")
  share      Float
  generatedAt DateTime @default(now())

  @@map("analytics_device_metrics")
  @@index([device])
}

model AnalyticsSession {
  id               String   @id
  userId           String?
  membershipRole   String?
  isMember         Boolean  @default(false)
  startedAt        DateTime @default(now())
  lastSeenAt       DateTime @default(now())
  endedAt          DateTime?
  durationSeconds  Int?
  pagePaths        String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  pageViews        AnalyticsPageView[]
  trafficAttribution AnalyticsTrafficAttribution[]

  @@index([userId])
  @@index([lastSeenAt])
}

model AnalyticsTrafficAttribution {
  id                 String   @id @default(cuid())
  sessionId          String   @unique
  analyticsSessionId String?
  path               String
  referrer           String?
  referrerDomain     String?
  utmSource          String?
  utmMedium          String?
  utmCampaign        String?
  utmTerm            String?
  utmContent         String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  analyticsSession   AnalyticsSession? @relation(fields: [analyticsSessionId], references: [id], onDelete: SetNull)

  @@index([analyticsSessionId])
  @@index([path])
  @@index([referrerDomain])
  @@index([utmSource])
  @@index([utmMedium])
}

model AnalyticsRealtimeEvent {
  id         String   @id @default(cuid())
  eventType  String
  occurredAt DateTime @default(now())
  createdAt  DateTime @default(now())

  @@index([occurredAt])
  @@index([eventType, occurredAt])
}

model AnalyticsSessionInsight {
  id                        String   @id @default(cuid())
  segment                   String
  avgSessionDurationSeconds Float
  pagesPerSession           Float
  retentionRate             Float
  share                     Float
  conversionRate            Float
  generatedAt               DateTime @default(now())

  @@map("analytics_session_insights")
  @@index([segment])
}

model AnalyticsTrafficSource {
  id                        String   @id @default(cuid())
  channel                   String
  sessions                  Int
  avgSessionDurationSeconds Float
  conversionRate            Float
  changePercent             Float
  generatedAt               DateTime @default(now())

  @@map("analytics_traffic_sources")
  @@index([channel])
}

model Ticket {
  id         String        @id @default(cuid())
  code       String        @unique
  eventId    String
  holderName String?
  status     TicketStatus  @default(unused)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  scanEvents TicketScanEvent[]

  @@index([eventId])
}

model TicketScanEvent {
  id               String        @id @default(cuid())
  ticketId         String
  code             String
  statusBefore     TicketStatus
  statusAfter      TicketStatus
  source           String?
  occurredAt       DateTime
  dedupeKey        String?       @unique
  serverSeq        Int?
  processedAt      DateTime?
  provisional      Boolean       @default(false)
  clientId         String?
  clientMutationId String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId, occurredAt])
}

model AnalyticsRealtimeSummary {
  id          String   @id @default(cuid())
  windowStart DateTime
  windowEnd   DateTime
  totalEvents Int
  eventCounts Json?
  generatedAt DateTime @default(now())

  @@map("analytics_realtime_summary")
  @@index([windowEnd])
}

model AnalyticsServerLog {
  id                String                    @id @default(cuid())
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  severity          AnalyticsServerLogSeverity
  service           String
  message           String
  description       String?
  metadata          Json?
  tags              String[]                  @default([])
  status            AnalyticsServerLogStatus  @default(open)
  occurrences       Int                       @default(1)
  affectedUsers     Int?
  recommendedAction String?
  firstSeenAt       DateTime                  @default(now())
  lastSeenAt        DateTime                  @default(now())
  fingerprint       String                    @unique

  @@map("analytics_server_logs")
  @@index([severity, lastSeenAt])
  @@index([status, lastSeenAt])
}
