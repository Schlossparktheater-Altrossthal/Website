services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - auto-deploy-pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - auto-deploy-internal

  auto-deploy:
    image: ${AUTO_DEPLOY_IMAGE:-limitlessgreen/theater_autodeploy:latest}
    pull_policy: ${AUTO_DEPLOY_PULL_POLICY:-always}
    restart: ${AUTO_DEPLOY_RESTART_POLICY:-unless-stopped}
    container_name: ${AUTO_DEPLOY_CONTAINER_NAME:-theater-autodeploy}
    environment:
      GIT_REMOTE_URL: ${AUTO_DEPLOY_GIT_REMOTE_URL:?set AUTO_DEPLOY_GIT_REMOTE_URL}
      GITHUB_WEBHOOK_SECRET: ${AUTO_DEPLOY_WEBHOOK_SECRET:?set AUTO_DEPLOY_WEBHOOK_SECRET}
      TARGET_BRANCH: ${AUTO_DEPLOY_TARGET_BRANCH:-main}
      DEPLOY_ENV: ${AUTO_DEPLOY_ENV:-prod}
      DEPLOY_SERVICE_NAME: ${AUTO_DEPLOY_SERVICE_NAME:-}
      COMPOSE_PROJECT_NAME: ${AUTO_DEPLOY_PROJECT_NAME:-theater}
      LISTEN_PORT: ${AUTO_DEPLOY_LISTEN_PORT:-3000}
      WEBHOOK_PATH: ${AUTO_DEPLOY_WEBHOOK_PATH:-/webhook}
    volumes:
      - ${AUTO_DEPLOY_DOCKER_SOCKET:-/var/run/docker.sock}:/var/run/docker.sock
      - auto-deploy-repo:/opt/worktree
    networks:
      - auto-deploy-proxy
      - auto-deploy-internal

volumes:
  auto-deploy-repo:
    name: ${AUTO_DEPLOY_WORKTREE_VOLUME:-auto-deploy-repo}
  auto-deploy-pgdata:
    name: ${AUTO_DEPLOY_PGDATA_VOLUME:-auto-deploy-pgdata}

networks:
  auto-deploy-proxy:
    external: true
    name: ${AUTO_DEPLOY_NETWORK:-proxy}
  auto-deploy-internal:
    internal: true
    name: ${AUTO_DEPLOY_INTERNAL_NETWORK:-auto-deploy-internal}
