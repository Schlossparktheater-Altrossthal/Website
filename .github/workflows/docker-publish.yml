name: Build and Push Docker Image

on:
  push:
    branches:
      - dev
      - main
    paths:
      - '.github/workflows/docker-publish.yml'
      - 'Dockerfile.dev'
      - 'Dockerfile.prod'
      - 'docker-compose*.yml'
      - 'package.json'
      - 'package-lock.json'
      - 'pnpm-lock.yaml'
      - 'next.config.ts'
      - 'tsconfig.json'
      - 'postcss.config.mjs'
      - 'tailwind.config.js'
      - 'eslint.config.mjs'
      - 'vitest.config.ts'
      - 'components.json'
      - 'src/**'
      - 'public/**'
      - 'prisma/**'
      - 'realtime-server/**'
      - 'scripts/**'
      - 'deploy-service/**'
  workflow_dispatch:

env:
  REGISTRY: docker.io
  WEBSITE_IMAGE_NAME: limitlessgreen/theater_website

jobs:
  build-and-push-website:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - branch: dev
            environment: dev
            dockerfile: Dockerfile.dev
            build_args: |
              NODE_ENV=development
              GIT_COMMIT_SHA=${{ github.sha }}
            metadata_tags: |
              type=raw,value=dev
          - branch: dev
            environment: prod
            dockerfile: Dockerfile.prod
            build_args: |
              NODE_ENV=production
              GIT_COMMIT_SHA=${{ github.sha }}
            metadata_tags: |
              type=raw,value=prod
          - branch: main
            environment: latest
            dockerfile: Dockerfile.prod
            build_args: |
              NODE_ENV=production
              GIT_COMMIT_SHA=${{ github.sha }}
            metadata_tags: |
              type=raw,value=latest
    name: Build and Push Theater Website Image (${{ matrix.environment }})
    steps:
      - name: Check branch compatibility
        id: branch-filter
        env:
          CURRENT_BRANCH: ${{ github.ref_name }}
          MATRIX_BRANCH: ${{ matrix.branch }}
        run: |
          if [ "$CURRENT_BRANCH" != "$MATRIX_BRANCH" ]; then
            echo "should_run=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "should_run=true" >> "$GITHUB_OUTPUT"

      - name: Skip build for non-matching branch
        if: steps.branch-filter.outputs.should_run != 'true'
        run: |
          echo "Skipping build for branch '${{ github.ref_name }}' (target: ${{ matrix.branch }})"

      - name: Checkout repository
        if: steps.branch-filter.outputs.should_run == 'true'
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        if: steps.branch-filter.outputs.should_run == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: steps.branch-filter.outputs.should_run == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Extract Docker metadata (${{ matrix.environment }})
        if: steps.branch-filter.outputs.should_run == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.WEBSITE_IMAGE_NAME }}
          tags: ${{ matrix.metadata_tags }}

      - name: Build and push ${{ matrix.environment }} Docker image
        if: steps.branch-filter.outputs.should_run == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.build_args }}

  build-and-push-deploy-service:
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    name: Build and Push Deploy Service Image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Extract Docker metadata (deploy-service)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.WEBSITE_IMAGE_NAME }}
          tags: |
            type=raw,value=deploy-service

      - name: Build and push deploy-service Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy-service/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
